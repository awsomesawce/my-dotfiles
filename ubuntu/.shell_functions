# This file contains some nice bash/zsh functions
# Dot-source this file.
# Author Carl C (awsomesawce at outlook dot com)
# vim filetype=sh
# shellcheck disable=SC2230
# shellcheck shell=bash
#
# Add the following code to ~/.bashrc or ~/.zshrc to source this file:
#
#if [[ -f ~/.shell_functions ]] && [[ -r ~/.shell_functions ]]; then
#    . "$HOME/.shell_functions"
#else
#    echo "\"~/.shell_functions\" unreadable or not present."
#fi
# 

## Invoke-Item command from pwsh.exe
# Only works if pwsh.exe is in path, otherwise use powershell.exe
pwshInvoke() {
    local pwshCommand="pwsh.exe -nop -c"
    eval "$pwshCommand" "Invoke-Item $*"
}

# This is a bad version of chtsh
#chtsh() { 
#    curl cht.sh/$* 
#    return 0
#}

if [[ -n "$BASH_VERSION" ]]; then
    chtshBash() {
        local Usage
        Usage="Usage: $(basename "$0") TERM
                Type the term you want to lookup after $0"
        if [[ -x /usr/bin/curl ]] || [[ -x /bin/curl ]]; then
            if [[ $# -eq 0 ]]; then
                echo "$Usage" && return 1
            elif [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
                echo "$Usage"; return 1
            else
                command curl "https://cht.sh/$*"
                return 0
            fi
        else
            echo "$0 Error: you need to have curl installed in \"/usr/bin\" or \"/bin\""
        fi
    }
fi

pygcat() {
    cat "$1" | pygmentize | less
}

# This function allows you to convert a manpage-formatted manpage into
# a document readable by humans.
groffman() 
{ 
    if [ $# -eq 0 ]; then
        echo "Usage: groffman file.1";
    else
        groff -man -T utf8 "$*";
    fi
return 0
}
whichless() {
   less $(which $1) # disable sc2230; `which` is used to get location of executable on path.
   return 0 
}
alias whichl=whichless;
whichfile() {
   file "$(which "$1")" || return 1
   return 0 
}
hexConvert() {
    echo "$*" | hd || return 1
    return 0
}
# The above function will take user input and convert it to hex without having to type the whole command out.
gitaddandcommit() {
 git add . && git commit -m "$@" 
return 0 
}

readmeDir() {
    local pagecommand=bat.exe
    if [ -f "$*/README.md" ]; then
        eval $pagecommand "$*/README.md"
    else
        echo "README.md not found in that directory."
    fi
    return 0
}
# The above function will pipe a file into the chroma highlighter, then pipe itinto less
chromaless() { cat "$1" | chroma | less; }
alias chless=chromaless

# This is a fix for the catimg oh-my-zsh plugin
# NOTE: when sourced from antigen, is has wrong plugin location.
catimg() {
    if [[ -x $(which convert) ]]; then
        zsh /home/carlc/.oh-my-zsh/plugins/catimg/catimg.sh "$@"
    else
        echo "catimg need convert (ImageMagick) to work)"
    fi
}

nodeprocessconf() {
    if [[ -x $(which node) ]]; then
        node -p 'console.log(process.config)'
    else
        echo "node executable not found"
    fi
}

# This next function will cd to the argument file, even if it is a variable.
cdfile() {
    if [[ $# -eq 0 ]]; then
        echo "$0 Error: Write an argument to cd to that file" 2>&1
    else
        # TODO: Add [[ -f "$@" ]] statement
        cd $(dirname "$(which "$@")") || {
            echo "Did not work" && return 1
                } 
            fi
        }

# Array of function names in this file.
export myCommands=("pwshInvoke" "groffman" "pygcat" "whichless" "whichfile" "hexConvert" "whichl" "gitaddandcommit" "readmeDir" "chromaless" "chless" "catimg" "nodeprocessconf")

list_my_funcs() {
    echo "------------ List of commands ------------"
    for comm in ${myCommands[@]}; do
        echo "$comm"
    done
    echo "------------ End of commands ------------"
    echo "Type \`type <command_name>\` for more information."
    echo "These are commands located in ~/.shell_functions"
}
# Let the people know when loading the shell that you have this command available.
echo "---- Try \"list_my_funcs\" to list functions available to you ----"

# Load functions that are zsh-specific
if [[ -n "$ZSH_VERSION" ]]; then
    cheatsheet() {
        if [ $# -eq 0 ]; then
            print -r -- "Usage: cheatsheet \`term\`"
            return 1
        else
            if [[ -x /usr/bin/curl ]] || [[ -x /bin/curl ]]; then
                command curl "https://cht.sh/$1" || { echo "There was an error"; exit 1; }
                return 0
            else
                print "$(basename "$0"): ERROR: Cannot find curl executable."
                return 1
            fi
        fi
    }

    zhelpfix() {
        local zshhelpdir=/usr/share/zsh/help
        local usage
        usage="
        Usage: $(basename "$0") term"
        if [[ $# -eq 0 ]]
        then
            print "$usage"
        else
            if [[ -d "$zshhelpdir" ]]; then
                if [[ "$*" == "list" ]]; then
                    ls "$zshhelpdir"
                else
                    
                    cat "$zshhelpdir/$*"
                fi
            fi
        fi
}
alias zhelp=zhelpfix
alias zhf=zhelpfix
fi

echo "~/.shell_functions loaded"

# vim:filetype=sh
