# This file contains some nice bash/zsh functions
# Dot-source this file.
# Author Carl C (awsomesawce at outlook dot com)
# shellcheck disable=SC2230
# shellcheck shell=bash
#
# Add the following code to ~/.bashrc or ~/.zshrc to source this file:
#
#if [[ -f ~/.shell_functions ]] && [[ -r ~/.shell_functions ]]; then
#    . "$HOME/.shell_functions"
#else
#    echo "\"~/.shell_functions\" unreadable or not present."
#fi
# 

argsOne="$1"
argsTwo="$2"
argsAll="$*"
argsArray="$@"


## Invoke-Item command from pwsh.exe
# Only works if pwsh.exe is in path, otherwise use powershell.exe
pwshInvoke() {
    local pwshCommand="pwsh.exe -nop -c"
    eval "$pwshCommand" "Invoke-Item $*"
}

# This is a bad version of chtsh
#chtsh() { 
#    curl cht.sh/$* 
#    return 0
#}

pygcat() {
    cat "$1" | pygmentize | less
}

# This function allows you to convert a manpage-formatted manpage into
# a document readable by humans.
groffman() 
{ 
    if [ $# -eq 0 ]; then
        echo "Usage: groffman file.1";
    else
        groff -man -T utf8 "$*";
    fi
return 0
}
whichless() {
   less $(which $1) # disable sc2230; `which` is used to get location of executable on path.
   return 0 
}
alias whichl=whichless;
whichfile() {
   file $(which $1) 
   return 0 
}
hexConvert() {
local argOne=$1
echo "$argOne" | hd
return 0
}
# The above function will take user input and convert it to hex without having to type the whole command out.
gitaddandcommit() {
 git add . && git commit -m "$@" 
return 0 
}

readmeDir() {
    local pagecommand=bat.exe
    if [ -f "$*/README.md" ]; then
        eval $pagecommand "$*/README.md"
    else
        echo "README.md not found in that directory."
    fi
    return 0
}
# The above function will pipe a file into the chroma highlighter, then pipe itinto less
chromaless() { cat "$1" | chroma | less; }
alias chless=chromaless

# This is a fix for the catimg oh-my-zsh plugin
# NOTE: when sourced from antigen, is has wrong plugin location.
catimg() {
    if [[ -x $(which convert) ]]; then
        zsh /home/carlc/.oh-my-zsh/plugins/catimg/catimg.sh "$@"
    else
        echo "catimg need convert (ImageMagick) to work)"
    fi
}

nodeprocessconf() {
    if [[ -x $(which node) ]]; then
        node -p 'console.log(process.config)'
    else
        echo "node executable not found"
    fi
}
cdfile() {
    if [[ $# -eq 0 ]]; then
        echo "$0 Error: Write an argument to cd to that file" 2>&1
    else
        cd $(dirname "$(which "$@")") || {
            echo "Did not work" && return 1
                } 
            fi
        }


if [[ -n "$ZSH_VERSION" ]]; then
    cheatsheet() {
        if [[ $# -eq 0 ]]; then
            print -r -- "Usage: cheatsheet \`term\`"
            return 1
        else
            if [[ -x /usr/bin/curl ]] || [[ -x /bin/curl ]]; then
                command curl "https://cht.sh/$1" || { echo "There was an error"; exit 1; }
                return 0
            else
                print "$(basename "$0"): ERROR: Cannot find curl executable."
                return 1
            fi
        fi
    }
alias chtsh=cheatsheet

    zhelpfix() {
        local zshhelpdir=/usr/share/zsh/help
        local usage="
        Usage: $(basename $0) term"
        if [[ $# -eq 0 ]]
        then
            print "$usage"
        else
            if [[ -d "$zshhelpdir" ]]; then
                if [[ "$*" == "list" ]]; then
                    ls "$zshhelpdir"
                else
                    cat "$zshhelpdir/$*"
                fi
            fi
        fi
}
fi

echo "~/.shell_functions loaded"

# vim:filetype=sh
