#!/bin/bash
# This file contains some nice bash/zsh functions
# Dot-source this file from bashrc or zshrc
# Author Carl C (awsomesawce at outlook dot com)
# vim filetype=sh

die() {
    printf '%s\n' "$*" >&2 && return 1
}

pwshInvoke() {
    local usage="Usage: pwshInvoke \"command\""
    if [ "$#" -eq 0 ]; then
        die "$usage"
    else # BUG: Without the else statement, the function continues even with the return statement above.
        if command -v pwsh.exe > /dev/null; then
            command pwsh.exe -nop -c "$@"
        else
            echo "Powershell executable not found" >&2 && return 1
        fi
    fi
    return 0
}

if [[ -n "$BASH_VERSION" ]]; then
    chtshBash() {
        if ! command -v curl > /dev/null; then echo "curl executable not found" >&2 && return 1; fi
        if [ "$#" -eq 0 ]; then
            echo "Usage: chtsh term_to_lookup"
            return 1
        elif [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
            echo "Usage: chtsh term_to_lookup"
            return 1
        else
            echo "Looking up $* on cht.sh"
            command -v curl > /dev/null && command curl "https://cht.sh/$*"
            return 0
        fi
    }
alias chtsh=chtshBash
fi

pygcat() {
    pygmentize <("$1") | less
}

# This function allows you to convert a manpage-formatted manpage into
# a document readable by humans.
groffman() 
{ 
    if [[ $# -eq 0 ]] || [[ "${1}" =~ ^(-h|--help)$ ]]; then
        echo "Usage: groffman manpage.1";
    else
        command groff -man -T utf8 "$*";
    fi
return 0
}
whichless() {
    if [ $# -eq 0 ]; then
        echo "Usage: whichless program_name"
    else
        less $(which $1) # disable sc2230; `which` is used to get location of executable on path.
        return 0 
    fi
}
alias whichl=whichless;
whichfile() {
    [[ "$#" -eq 0 ]] && {
        echo "Usage: whichfile command_name" 2>&1 && return 1
    }
    command file "$(which "$1")" || return 1
    return 0 
}
hexConvert() {
    echo "$*" | hd || return 1
    return 0
}
# The above function will take user input and convert it to hex without having to type the whole command out.
gitaddandcommit() {
    if [ "$#" -eq 0 ]; then
        git add . && git commit
    else
        git add . && git commit -m "$*"
    fi
    return 0 
}

readmeDir() {
    # This function is mainly for reading readmes that reside in oh-my-zsh plugin dirs
    local pagecommand=bat.exe
    local myreadme="$*/README.md"
    if [ -f "$myreadme" ]; then
        echo "Opening $myreadme"
        eval $pagecommand "$myreadme"
    else
        echo "README.md not found in that directory."
    fi
    return 0
}
# The above function will pipe a file into the chroma highlighter, then pipe itinto less
chromaless() { cat "$1" | chroma | less; }
alias chless=chromaless

# This is a fix for the catimg oh-my-zsh plugin
# NOTE: when sourced from antigen, is has wrong plugin location.
catimg() {
    if command -v convert > /dev/null; then
        zsh /home/carlc/.oh-my-zsh/plugins/catimg/catimg.sh "$@"
    else
        echo "catimg need convert (ImageMagick) to work"
    fi
}

nodeprocessconf() {
    if [[ -x $(which node) ]]; then
        #node -p 'console.log(process.config)'
        node -p "process.config" # console.log not needed if invoked from console.
    else
        echo "node executable not found"
    fi
}

# This next function will cd to the argument file, even if it is a variable.
cdfile() {
    if [[ $# -eq 0 ]]; then
        echo "$0 Error: Write an argument to cd to that file" 2>&1
    else
        # TODO: Add [[ -f "$@" ]] statement
        cd $(dirname "$(which "$@")") || {
            echo "Did not work" && return 1
                } 
            fi
        }

# Array of function names in this file.
typeset -a myCommands
export myCommands=("pwshInvoke" "groffman" "pygcat" "whichless" \ 
    "whichfile" "hexConvert" "whichl" "gitaddandcommit" "readmeDir" \ 
    "chromaless" "chless" "catimg" "nodeprocessconf" "nvimconfig" \ 
    "zhelpfix (zsh only)" "list_trash" "empty_trash" "pyhelp" \ 
    "ghrestapi" "duks")

list_my_funcs() {
    echo "------------ List of commands ------------"
    for comm in "${myCommands[@]}"; do
        echo "$comm"
    done
    echo "------------ End of commands ------------"
    echo "Type \`type <command_name>\` for more information."
    echo "These are commands located in ~/.shell_functions"
}
# Let the people know when loading the shell that you have this command available.
echo "---- Try \"list_my_funcs\" to list functions available to you ----"

# Load functions that are zsh-specific
if [[ -n "$ZSH_VERSION" ]]; then
    cheatsheet() {
        if [ $# -eq 0 ]; then
            print -r -- "Usage: cheatsheet \`term\`"
            return 1
        else
            if [[ -x /usr/bin/curl ]] || [[ -x /bin/curl ]]; then
                command curl "https://cht.sh/$1" || { echo "There was an error"; return 1; }
                return 0
            else
                print "$(basename "$0"): ERROR: Cannot find curl executable."
                return 1
            fi
        fi
    }

    zhelpfix() {
        local zshhelpdir=/usr/share/zsh/help
        local usage
        usage="
        Usage: $(basename "$0") [-p] term"
        if [[ $# -eq 0 ]] || [[ "${1}" =~ ^(-h|--help)$ ]]; # Add regex for if "-h" or "--help" arg.
        then
            print "$usage"
        else
            if [[ -d "$zshhelpdir" ]]; then
                if [[ "$*" == "list" ]]; then
                    ls "$zshhelpdir"
                elif [[ "$1" == "-p" ]]; then
                    less "$zshhelpdir/$2"
                else
                    cat "$zshhelpdir/$*"
                fi
            fi
        fi
}
alias zhelp=zhelpfix
alias zhf=zhelpfix
fi

echo "~/.shell_functions loaded"

# vim:filetype=sh
duks () {
    #                                 This regex stuff is only available in bash, not posix shell.
    local usage="Usage: duks [-h|--help] search_term
    Description: duks will look up the \"search_term\" at duckduckgo.com in a browser window."
    if [[ $# -eq 0 ]] || [[ "${1}" =~ ^(-h|--help)$ ]]; then
        echo "need args to this func" >&2
        echo "$usage" 2>&1
        return 1
    fi
#	(( 1 )) && {
    if command -v wslview > /dev/null; then
        [[ $# -eq 1 ]] && {
            echo "Looking up ${1}"
            wslview "https://duckduckgo.com/?q=$1"
            return 0
        }
    else
        echo "wslview executable not found" 2>&1 && return 1
    fi
	#}
}

pyhelp () {
    # This is a pydoc implemented in shell scripting.
    local usage="This is a simple pydoc-like function to get python documentation."
	if [[ "$#" -eq 0 ]]
	then
		echo "Usage: pyhelp term"
        printf '%s\n' "$usage"
		return 1
	fi
	if [[ "$#" -eq 1 ]]
	then
		if command -v python3 > /dev/null
		then
			python3 -c "import ${1}; help($1)"
		else
			echo "python not detected" 2>&1
			return 1
		fi
	else
		echo "Too many args" 2>&1 && return 1
	fi
}

# Github rest api basic using curl
ghrestapi () 
{ 
    if [ $# -eq 0 ]; then
        echo "ghrestapi needs args";
        return 1;
    else
        if command -v curl > /dev/null; then
            curl "https://api.github.com/repos/$1/$2";
            return 0;
        else
            echo "Curl not install in PATH";
        fi;
    fi
}

# list_trash lists the items in the trash folder `~/.trash'
list_trash () 
{ 
    if [ -d ~/.trash ]; then
        echo -e "=== Listing trash ===\n" 1>&2;
        ls --color=auto ~/.trash;
    else
        echo "Trash not found" 1>&2;
    fi
}

# Emptys the trash but asks first
# If user supplies the `-f' flag, force remove all trash items.
empty_trash () 
{ 
    if [[ $# -eq 0 ]]; then
        rm -iv ~/.trash/*;
        return 0;
    fi;
    if [[ "$1" == "-f" ]]; then
        rm -f ~/.trash/*;
    fi;
    return 0
}

nvimconfig() {
    local NVIMCONFIGDIR=~/.config/nvim/
    if [[ -d "$NVIMCONFIGDIR" ]]; then
        nvim $NVIMCONFIGDIR
        return 0
    else
        echo "$NVIMCONFIGDIR not found buddy" >&2
        return 1
    fi
}

# Sinfo is a simple way to look up multiple programs using `scoop info'
sinfo () 
{ 
    if [ $# -eq 0 ]; then
        echo "
sinfo gives scoop info for multiple args
";
        return 1;
    fi;
    if [[ "$1" == "-h" ]]; then
        echo "scoop info for multiple args";
        return 1;
    fi;
    for i in "${@}";
    do
        scoop info "$i";
    done
}
