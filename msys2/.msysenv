# MSYS2's Main Bash Env
# OriginalLocation: ~/gitstuff/my-dotfiles/msys2/.msysenv (Windows cmd: %USERPROFILE%\gitstuff\my-dotfiles\msys2\.msysenv)
# CopyLocations: $OneDrive\dotfiles_backup\msys2\.msysenv $OneDrive\snippets\bash\EnvScripts\.msysenv
# Description: This file is meant to be sourced from /c/Users/Carl/.msysEntry
# Author: Carl C
# License: MIT/X11
# TODO: Write a test whether PATH contains the correct appended path, and if it already contains it, report it and don't set PATH

# Dotfiles_backup variable
dotfiles_onedrive="$OneDrive/dotfiles_backup"
msys_onedrive="$dotfiles_onedrive/msys2"
msys2_dotfiles_git=~/gitstuff/my-dotfiles/msys2/

# unset gem stuff because we will be using MSYS2's ruby
unset GEM_HOME
unset GEM_PATH

# Update PATH to include scoop shims and other executables and scripts
export PATH="$PATH:$HOME/bin:$HOME/.deno/bin:$HOME/scoop/shims:$HOME/go/bin:/d/Carl/AppData/npm:/c/Program Files/nodejs:/home/Carl/bin:/c/Program Files/Powershell/7/"
if [[ -n $BASH_VERSION ]]; then
    typeset -gxA bashfilearr
    bashfilearr=([shellname]="bash" [description]="MSYS2 main shell" [envfile]=~/gitstuff/my-dotfiles/msys2/.msysenv [ismsys]=yes [issetup]=yes )
    echo "\$bashfilearr assoc array set"
fi
typeset -Agx bakdirs
bakdirs=([description]="List of backup directories to copy to" [1]="$OneDrive/dotfiles_backup/msys2" [2]="$OneDrive/snippets/bash/EnvScripts")

echo "Array \$bakdirs is set."

#cpthisfile() {
#if [[ -f "${bashfilearr[envfile]}" ]]; then
#printf '%s\n' "Copying ${bashfilearr[envfile]} to backup directories"
DOTFILESGIT_MSYS=~/gitstuff/my-dotfiles/msys2
cpMSYSconfigfrommydotfiles() {
	if [ -d "$DOTFILESGIT_MSYS" ] && [ -d "$OneDrive/dotfiles_backup/msys2" ]; then
	    echo "dotfilesgit msys2 repo found"
	    echo "dotfiles_backup folder on onedrive found"
	    cp -Ri "$DOTFILESGIT_MSYS/*" "$OneDrive/dotfiles_backup/msys2" || return 1
	    return 0
	else
	    echo "Cannot find msys2 dotfiles git repo"
	    return 1
	fi
}
typeset -agx commandsExtra=("cpMSYSconfigfrommydotfiles")
# See ./msysfuncs.sh for listmycommands function. TODO

typeset -gx msysfuncs=~/gitstuff/my-dotfiles/msys2/msysfuncs.sh
if [[ -r "$msysfuncs" ]]; then
    . "$msysfuncs"
else
    echo "Something wrong: $msysfuncs not readable"
fi

# Function to create tarfile backup of my-dotfiles/msys2/

create_msys2_tarfile() {
    local filename="msys2-$(date -I).tar.xz"
    if [ $# -gt 0 ]; then
        echo "create_msys2_tarfile function does not need args" 2>&1
    else
        if [[ -d ~/gitstuff/my-dotfiles/msys2 ]]; then
            command cd ~/gitstuff/my-dotfiles
            # Check if bsdtar is installed and use that
            command -v bsdtar > /dev/null && {
                command bsdtar -acvf "$filename" msys2/*
            } || {
                # If command -v bsdtar came back with an errorcode, use tar.
                [[ -x /usr/bin/tar ]] && exec /usr/bin/tar -acvf "$filename" msys2/* || return 1
            }
            command cp -v "$filename" "/d/Carl/OneDrive/dotfiles_backup/msys2/bkup_archives/" || return 1
            if [[ -f "$filename" ]] && [[ -f "/d/Carl/OneDrive/dotfiles_backup/msys2/bkup_archives/$filename" ]]; then
                printf '%s\n' "Done copying" "Removing extra file"
                rm -f "$filename"
            else
                echo "Error: Something went wrong" 2>&1
            fi
        else
            echo "~/gitstuff/my-dotfiles/msys2 dir not found" 2>&1
            return 1
        fi
    fi
    return 0
}
